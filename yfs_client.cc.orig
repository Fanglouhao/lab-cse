// yfs client.  implements FS operations using extent and lock server
#include "yfs_client.h"
#include "extent_client.h"
#include <sstream>
#include <iostream>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

<<<<<<< HEAD
=======
#define EXT_RPC(xx) do { \
    if ((xx) != extent_protocol::OK) { \
        printf("EXT_RPC Error: %s:%d \n", __FILE__, __LINE__); \
        r = IOERR; \
        goto release; \
    } \
} while (0)

yfs_client::yfs_client()
{
    ec = new extent_client();

}

>>>>>>> lab1
yfs_client::yfs_client(std::string extent_dst, std::string lock_dst)
{
  ec = new extent_client(extent_dst);
  lc = new lock_client(lock_dst);
  if (ec->put(1, "") != extent_protocol::OK)
      printf("error init root dir\n"); // XYB: init root dir
}


yfs_client::inum
yfs_client::n2i(std::string n)
{
    std::istringstream ist(n);
    unsigned long long finum;
    ist >> finum;
    return finum;
}

std::string
yfs_client::filename(inum inum)
{
    std::ostringstream ost;
    ost << inum;
    return ost.str();
}

bool
yfs_client::isfile(inum inum)
{
    extent_protocol::attr a;

    if (ec->getattr(inum, a) != extent_protocol::OK) {
        printf("error getting attr\n");
        return false;
    }

    if (a.type == extent_protocol::T_FILE) {
        printf("isfile: %lld is a file\n", inum);
        return true;
    } 
    printf("isfile: %lld is a dir\n", inum);
    return false;
}
/** Your code here for Lab...
 * You may need to add routines such as
 * readlink, issymlink here to implement symbolic link.
 * 
 * */
int 
yfs_client::writeBack(inum parent, const char* name, inum& ino)
{
	int r = OK;
	if(!isdir(parent))
	{
		r = IOERR;
		return r;
	}
	std::ostringstream oss;
	std::string parent_buffer;
	std::string name_string = std::string(name);
	int length = name_string.length();
	char *length_char = (char *)&length;
	EXT_RPC(ec -> get(parent, parent_buffer));
	oss.write((char *)&ino, sizeof(inum));
	oss.write(length_char, 1);
	oss.write(name, length);
	parent_buffer += oss.str();
	EXT_RPC(ec -> put(parent, parent_buffer));
release:
	return r;
}

bool
yfs_client::issymlink(inum inum)
{
	extent_protocol::attr attr_content;
	if(ec -> getattr(inum, attr_content) != extent_protocol::OK)
	{
		return false;
	}
	return (attr_content.type == extent_protocol::T_SYMLINK);
}

	
int
yfs_client::symlink(inum parent, const char* name, const char* link, inum& ino_out)
{
	int r = OK;
	if(!isdir(parent))
	{
		r = IOERR;
		return r;
	}
	std::string link_string = std::string(link);
	EXT_RPC(ec -> create(extent_protocol::T_SYMLINK, ino_out));
	EXT_RPC(ec -> put(ino_out, link_string));
	r = writeBack(parent, name, ino_out);
release:
	return r;
}

int
yfs_client::readlink(inum ino, std::string &link)
{
	int r = OK;
	if(ino < 1 || ino > INODE_NUM)
	{
		r = IOERR;
		return r;
	}

	EXT_RPC(ec -> get(ino, link));
release:
	return r;
}


bool
yfs_client::isdir(inum inum)
{
	extent_protocol::attr attr_content;
	if(ec -> getattr(inum, attr_content) != extent_protocol::OK)
	{
		return false;
	}
    // Oops! is this still correct when you implement symlink?
    	return (attr_content.type == extent_protocol::T_DIR);
}

int
yfs_client::getfile(inum inum, fileinfo &fin)
{
    int r = OK;

    printf("getfile %016llx\n", inum);
    extent_protocol::attr a;
    if (ec->getattr(inum, a) != extent_protocol::OK) {
        r = IOERR;
        goto release;
    }

    fin.atime = a.atime;
    fin.mtime = a.mtime;
    fin.ctime = a.ctime;
    fin.size = a.size;
    printf("getfile %016llx -> sz %llu\n", inum, fin.size);

release:
    return r;
}

int
yfs_client::getdir(inum inum, dirinfo &din)
{
    int r = OK;

    printf("getdir %016llx\n", inum);
    extent_protocol::attr a;
    if (ec->getattr(inum, a) != extent_protocol::OK) {
        r = IOERR;
        goto release;
    }
    din.atime = a.atime;
    din.mtime = a.mtime;
    din.ctime = a.ctime;

release:
    return r;
}


// Only support set size of attr
int
yfs_client::setattr(inum ino, size_t size)
{
	int r = OK;

    /*
     * your code goes here.
     * note: get the content of inode ino, and modify its content
     * according to the size (<, =, or >) content length.
     */
	if(ino < 1 || ino > INODE_NUM)
	{
		r = IOERR;
		return r;
	}
	std::string content;
	EXT_RPC(ec -> get(ino, content));
	if(size != content.length())
	{
		content.resize(size, '\0');
		EXT_RPC(ec -> put(ino, content));
	}
release:
    	return r;
}

int
yfs_client::create(inum parent, const char *name, mode_t mode, inum &ino_out)
{
	int r = OK;
    /*
     * your code goes here.
     * note: lookup is what you need to check if file exist;
     * after create file or dir, you must remember to modify the parent infomation.
     */
	//format inum|length|filename
	if(!isdir(parent))
        {
                r = IOERR;
		return r;
        }
	bool found = false;
	inum ino_lookUp;
	lookup(parent, name, found, ino_lookUp);
	if(found == true)
	{
		r = EXIST;
		return r;
	}
	EXT_RPC(ec -> create(extent_protocol::T_FILE, ino_out));
	r = writeBack(parent, name, ino_out);
release:
    	return r;
}

int
yfs_client::mkdir(inum parent, const char *name, mode_t mode, inum &ino_out)
{
	int r = OK;
    /*
     * your code goes here.
     * note: lookup is what you need to check if directory exist;
     * after create file or dir, you must remember to modify the parent infomation.
     */
	
	if(!isdir(parent))
	{
		r = IOERR;
		return r;
	}
	bool found = false;
	inum ino_lookUp;
	lookup(parent, name, found, ino_lookUp);
	if(found == true)
	{
		r = EXIST;
		return r;	
	}
	EXT_RPC(ec -> create(extent_protocol::T_DIR, ino_out));
	r = writeBack(parent, name, ino_out);
release:
	return r;
}

int
yfs_client::lookup(inum parent, const char *name, bool &found, inum &ino_out)
{
	int r = OK;
	found = false;

    /*
     * your code goes here.
     * note: lookup file from parent dir according to name;
     * you should design the format of directory content.
     */
	if(parent < 1 || parent > INODE_NUM)
	{
		r = IOERR;
		return r;
	}	

	std::list<dirent> parentList;
	EXT_RPC(readdir(parent, parentList));
	for(std::list<dirent>::iterator it = parentList.begin(); it != parentList.end(); it++)
	{
		if(it -> name == std::string(name))
		{
			found = true;
			ino_out = it -> inum;
			break;	
		}
	}
release:
	return r;
}

int
yfs_client::readdir(inum dir, std::list<dirent> &list)
{
    	int r = OK;

    /*
     * your code goes here.
     * note: you should parse the dirctory content using your defined format,
     * and push the dirents to the list.
     */
	// format inum|length|filename
	if(dir < 1 || dir > INODE_NUM)
	{
		r = IOERR;
		return r;
	}
	list.clear();
	char length_char;
	int length;
	dirent theDirent;
        inum theInum;
        char filename[255];
	std::string content;
	std::istringstream iss;
	EXT_RPC(ec -> get(dir, content));
	iss.str(content);
	while(iss.read((char *)&theInum, sizeof(inum)))
	{
		iss.read(&length_char, 1);
		length = (int)length_char;
		iss.read(filename, length);
		theDirent.inum = theInum;
		theDirent.name = std::string(filename, length);
		list.push_back(theDirent);
	}
release:
	return r;
}

int
yfs_client::read(inum ino, size_t size, off_t off, std::string &data)
{
	int r = OK;
    /*
     * your code goes here.
     * note: read using ec->get().
     */
	if(ino < 1 || ino > INODE_NUM || off < 0)
	{
		r = IOERR;
		return r;
	}
	std::string content;
	size_t size_read_to_end;
	EXT_RPC(ec -> get(ino, content));
	size_read_to_end = content.length() - off;
	if(size > size_read_to_end)
	{
		data = content.substr(off, size_read_to_end);
	}
	else
	{
		data = content.substr(off, size);
	}
release:
	return r;
}

int
yfs_client::write(inum ino, size_t size, off_t off, const char *data,
        size_t &bytes_written)
{
    	int r = OK;
    /*
     * your code goes here.
     * note: write using ec->put().
     * when off > length of original file, fill the holes with '\0'.
     */
	if(ino < 1 || ino > INODE_NUM || off < 0)
	{
		r = IOERR;
		return r;
	}
	
	std::string content;
	size_t size_original;
	std::string data_replace = std::string(data, size);
	EXT_RPC(ec -> get(ino, content));
	size_original = content.length();
	if(off + size > size_original)
	{
		content.resize(off + size, '\0');
	}
	content.replace(off, size, data_replace);
	EXT_RPC(ec -> put(ino, content));
	bytes_written = size;
release:
    	return r;
}

int yfs_client::unlink(inum parent,const char *name)
{
	int r = OK;

    /*
     * your code goes here.
     * note: you should remove the file using ec->remove,
     * and update the parent directory content.
     */
	if(!isdir(parent))
	{
		r = IOERR;
		return r;
	}
	std::list<dirent> parentList;
	std::list<dirent>::iterator it;
	std::string name_string = std::string(name);
	EXT_RPC(readdir(parent, parentList));
	
	for(it = parentList.begin(); it != parentList.end(); it++)
	{
		if(it -> name == name_string)
		{
			EXT_RPC(ec -> remove(it -> inum));
			break;
		}
	}
	if(it == parentList.end())
	{
		r = NOENT;
		return r;
	}
	parentList.erase(it);
	EXT_RPC(ec -> put(parent, ""));
	for(std::list<dirent>::iterator it2 = parentList.begin(); it2 != parentList.end(); it2 ++)
	{
		char * name_it2 = (char *)(it2 -> name.data());
		r = writeBack(parent, name_it2, it2 -> inum);
	}
release:
	return r;
}

