#include "inode_manager.h"

// disk layer -----------------------------------------

disk::disk()
{
  bzero(blocks, sizeof(blocks));
}

void
disk::read_block(blockid_t id, char *buf)
{
<<<<<<< HEAD
  if (id < 0 || id >= BLOCK_NUM || buf == NULL)
    return;

  memcpy(buf, blocks[id], BLOCK_SIZE);
=======
	if((id >= 0) && (id < BLOCK_NUM))
	{
		memcpy(buf, blocks[id], BLOCK_SIZE);
	}
>>>>>>> lab1
}

void
disk::write_block(blockid_t id, const char *buf)
{
<<<<<<< HEAD
  if (id < 0 || id >= BLOCK_NUM || buf == NULL)
    return;

  memcpy(blocks[id], buf, BLOCK_SIZE);
=======
	if((id >= 0) && (id < BLOCK_NUM))
	{
		memcpy(blocks[id], buf, BLOCK_SIZE);	
	}
>>>>>>> lab1
}

// block layer -----------------------------------------

// Allocate a free disk block.
blockid_t
block_manager::alloc_block()
{
  /*
   * your code goes here.
   * note: you should mark the corresponding bit in block bitmap when alloc.
   * you need to think about which block you can start to be allocated.
   */
	blockid_t bId = IBLOCK(sb.ninodes, sb.nblocks);	
	while(bId < sb.nblocks)
	{
		char buf[BLOCK_SIZE];
		read_block(BBLOCK(bId), buf);  //find the block containing bit for bId
		int offset = 0;
		while(offset < BLOCK_SIZE && bId < sb.nblocks)
		{
			for(int i = 0; i < 8 ; i++)
			{
				if((*(char *)(buf + offset) & (1 << i)) == 0)
				{
					*(char *)(buf + offset) = *(char *)(buf + offset) | (1 << i);
					write_block(BBLOCK(bId), buf); // write back bitmap
                                        return bId;
				}
				else
				{
					bId++;
				}
			}
			offset ++;
		}
	}
	exit(-1);
}

void
block_manager::free_block(uint32_t id)
{
  /* 
   * your code goes here.
   * note: you should unmark the corresponding bit in the block bitmap when free.
   */
  	if((id >= BBLOCK(BLOCK_NUM)) && (id < BLOCK_NUM))
	{
		char buf[BLOCK_SIZE];
		read_block(BBLOCK(id), buf);
		int byteOffset = (id % BPB)/8;
		int bitOffset = (id % BPB)%8;
		unsigned char mask = ~(1 << bitOffset);
		*(char *)(buf + byteOffset) = *(char *)(buf + byteOffset) & mask;
		write_block(BBLOCK(id), buf);
	}
	return;
}

// The layout of disk should be like this:
// |<-sb->|<-free block bitmap->|<-inode table->|<-data->|
block_manager::block_manager()
{
  d = new disk();

  // format the disk
  sb.size = BLOCK_SIZE * BLOCK_NUM;
  sb.nblocks = BLOCK_NUM;
  sb.ninodes = INODE_NUM;

}

void
block_manager::read_block(uint32_t id, char *buf)
{
  d->read_block(id, buf);
}

void
block_manager::write_block(uint32_t id, const char *buf)
{
  d->write_block(id, buf);
}

// inode layer -----------------------------------------

inode_manager::inode_manager()
{
  bm = new block_manager();
  uint32_t root_dir = alloc_inode(extent_protocol::T_DIR);
  if (root_dir != 1) {
    printf("\tim: error! alloc first inode %d, should be 1\n", root_dir);
    exit(0);
  }
}

/* Create a new file.
 * Return its inum. */
uint32_t
inode_manager::alloc_inode(uint32_t type)
{
  /* 
   * your code goes here.
   * note: the normal inode block should begin from the 2nd inode block.
   * the 1st is used for root_dir, see inode_manager::inode_manager().
   */
	uint32_t oneInum = 1;
	while (oneInum < INODE_NUM)
	{
		inode_t *inode = get_inode(oneInum);
		if(inode == NULL || inode -> type == 0)
		{
			inode = (inode_t *)malloc(sizeof(inode_t));
			inode -> type = type;
			inode -> size = 0;
			inode -> ctime = (unsigned int)time(NULL);
			inode -> atime = (unsigned int)time(NULL);
			inode -> mtime = (unsigned int)time(NULL);
			put_inode(oneInum, inode);
			free(inode);
			return oneInum;
		}
		oneInum ++;
	}
	exit(-1);
}

void
inode_manager::free_inode(uint32_t inum)
{
  /* 
   * your code goes here.
   * note: you need to check if the inode is already a freed one;
   * if not, clear it, and remember to write back to disk.
   */
	if((inum >= 1) && (inum < INODE_NUM))
	{
		inode_t *inode = get_inode(inum);
		if(inode != NULL && inode -> type != 0)
		{
			inode -> type = 0;
			put_inode(inum, inode);
		}
	}
  	return;
}


/* Return an inode structure by inum, NULL otherwise.
 * Caller should release the memory. */
struct inode* 
inode_manager::get_inode(uint32_t inum)
{
  struct inode *ino, *ino_disk;
  char buf[BLOCK_SIZE];

  printf("\tim: get_inode %d\n", inum);

  if (inum < 0 || inum >= INODE_NUM) {
    printf("\tim: inum out of range\n");
    return NULL;
  }

  bm->read_block(IBLOCK(inum, bm->sb.nblocks), buf);
  // printf("%s:%d\n", __FILE__, __LINE__);

  ino_disk = (struct inode*)buf + inum%IPB;
  if (ino_disk->type == 0) {
    printf("\tim: inode not exist\n");
    return NULL;
  }

  ino = (struct inode*)malloc(sizeof(struct inode));
  *ino = *ino_disk;

  return ino;
}

void
inode_manager::put_inode(uint32_t inum, struct inode *ino)
{
  char buf[BLOCK_SIZE];
  struct inode *ino_disk;

  printf("\tim: put_inode %d\n", inum);
  if (ino == NULL)
    return;

  bm->read_block(IBLOCK(inum, bm->sb.nblocks), buf);
  ino_disk = (struct inode*)buf + inum%IPB;
  *ino_disk = *ino;
  bm->write_block(IBLOCK(inum, bm->sb.nblocks), buf);
}

#define MIN(a,b) ((a)<(b) ? (a) : (b))

/* Get all the data of a file by inum. 
 * Return alloced data, should be freed by caller. */
void
inode_manager::read_file(uint32_t inum, char **buf_out, int *size)
{
  /*
   * your code goes here.
   * note: read blocks related to inode number inum,
   * and copy them to buf_Out
   */
	inode_t *inode = get_inode(inum);
	if(inode != NULL && inode -> type != 0)
	{
		unsigned int size_all = inode->size;
		*size = size_all;
		char *readBuf = (char *)malloc(size_all);
		*buf_out = readBuf;
		unsigned int size_tem = 0;
		unsigned int blockId = 0;
		while(blockId < NDIRECT && size_tem < size_all)
		{
			if((size_all - size_tem) > BLOCK_SIZE)
			{
				bm -> read_block(inode -> blocks[blockId], readBuf+size_tem);
				size_tem += BLOCK_SIZE;
			}
			else
			{
				char block_buffer[BLOCK_SIZE];
				bm -> read_block(inode -> blocks[blockId], block_buffer);
				memcpy(readBuf + size_tem, block_buffer, size_all - size_tem);
				size_tem = size_all;			
			}
			blockId ++;
		}
		if(blockId >= NDIRECT && size_tem < size_all)
		{
			char indirect[BLOCK_SIZE];
			bm -> read_block(inode -> blocks[NDIRECT], indirect);
			unsigned int in_index = 0;
			while(in_index < NINDIRECT && size_tem < size_all)
			{
				blockid_t blockId = *((blockid_t *)indirect + in_index);
				if(size_all - size_tem > BLOCK_SIZE)
				{
					bm -> read_block(blockId, readBuf + size_tem);
					size_tem += BLOCK_SIZE;
				}
				else
				{
					char block_buffer[BLOCK_SIZE];
					bm -> read_block(blockId, block_buffer);
					memcpy(readBuf + size_tem, block_buffer, size_all - size_tem);
					size_tem = size_all;
				}
				in_index++;
			}
		}
		inode -> atime = (unsigned int)time(NULL);
		inode -> ctime = (unsigned int)time(NULL);
		put_inode(inum, inode);
	}
	free(inode);
  	return;
}

/* alloc/free blocks if needed */
void
inode_manager::write_file(uint32_t inum, const char *buf, int size)
{
  /*
   * your code goes here.
   * note: write buf to blocks of inode inum.
   * you need to consider the situation when the size of buf 
   * is larger or smaller than the size of original inode
   */
  	inode_t *inode = get_inode(inum);
	int size_old = inode -> size;
	unsigned int block_num_new = (size + BLOCK_SIZE - 1)/BLOCK_SIZE;
	unsigned int block_num_old = (size_old + BLOCK_SIZE - 1)/BLOCK_SIZE;
	if(size >= size_old)
	{
		if(block_num_new > NDIRECT)
		{
			if(block_num_old < NDIRECT)
			{
				for(unsigned int i = block_num_old; i <= NDIRECT; i++)
                                {
                                        inode -> blocks[i] = bm -> alloc_block();
                                }
			}
			
			char indirect[BLOCK_SIZE];
			if(block_num_old >= NDIRECT)
			{
				bm -> read_block(inode -> blocks[NDIRECT], indirect);
			}
			else
			{
				bzero(indirect, BLOCK_SIZE);
			}
			for(unsigned int i = MIN(0, block_num_old - NDIRECT); i < block_num_new - NDIRECT; i++)
			{
				*((blockid_t *)indirect + i) = bm -> alloc_block();
			}
			bm -> write_block(inode -> blocks[NDIRECT], indirect);
		}
		else
		{
			for(unsigned int i = block_num_old; i < block_num_new; i++)
			{
				inode -> blocks[i] = bm -> alloc_block();
			}
		}
	}
	else
	{
		if(block_num_new > NDIRECT)
		{
			char indirect[BLOCK_SIZE];
			bm -> read_block(inode -> blocks[NDIRECT], indirect);
			for(unsigned int i = block_num_new; i < block_num_old; i++)
			{
				bm -> free_block(*((blockid_t *)indirect + (i - NDIRECT)));
			}
		}
		else
		{
			if(block_num_old > NDIRECT)
			{
				char indirect[BLOCK_SIZE];
				bm -> read_block(inode -> blocks[NDIRECT], indirect);
				for(unsigned int i = 0; i < block_num_old - NDIRECT; i++)
				{
					bm -> free_block(*((blockid_t *)indirect + i));
				}
				bm -> free_block(inode -> blocks[NDIRECT]);
			}
			for(unsigned int j = block_num_new; j < block_num_old; j++)
			{
				bm -> free_block(inode -> blocks[j]);
			}
		}
	}
	int size_tem = 0;
        int blockIndex = 0;
        while(blockIndex < NDIRECT && size_tem < size)
        {
		if(size - size_tem > BLOCK_SIZE)
		{
			bm -> write_block(inode -> blocks[blockIndex], buf + size_tem);
			size_tem += BLOCK_SIZE;
		}
		else
		{
			char block_buffer[BLOCK_SIZE];
			memcpy(block_buffer, buf + size_tem, size - size_tem);
			bm -> write_block(inode -> blocks[blockIndex], block_buffer);
			size_tem = size;
		}
		blockIndex++;
        }
	if(blockIndex >= NDIRECT && size_tem < size)
	{
		char indirect[BLOCK_SIZE];
		bm -> read_block(inode -> blocks[NDIRECT], indirect);
		unsigned int in_index = 0;
		while(in_index < NINDIRECT && size_tem < size)
		{
			blockid_t blockId = *((blockid_t *)indirect + in_index);
			if(size - size_tem > BLOCK_SIZE)
			{
				bm -> write_block(blockId, buf + size_tem);
				size_tem += BLOCK_SIZE;
			}
			else
			{
				char block_buffer[BLOCK_SIZE];
				memcpy(block_buffer, buf + size_tem, size - size_tem);
				bm -> write_block(blockId, block_buffer);
				size_tem = size;
			}
			in_index++;
		}
	}
	inode -> size = size;
	inode -> mtime = (unsigned int)time(NULL);
	inode -> ctime = (unsigned int)time(NULL);
	put_inode(inum, inode);
	free(inode);
  	return;
}

void
inode_manager::getattr(uint32_t inum, extent_protocol::attr &a)
{
  /*
   * your code goes here.
   * note: get the attributes of inode inum.
   * you can refer to "struct attr" in extent_protocol.h
   */
	inode_t* inode = get_inode(inum);
	if(inode != NULL)
	{
		a.type = inode -> type;
		a.size = inode -> size;
		a.ctime = inode -> ctime;
		a.atime = inode -> atime;
		a.mtime = inode -> mtime;
		free(inode);
	}
	return;
}

void
inode_manager::remove_file(uint32_t inum)
{
  /*
   * your code goes here
   * note: you need to consider about both the data block and inode of the file
   */
	inode_t*  inode = get_inode(inum);
	int size = inode -> size;
	unsigned int block_num = (size + BLOCK_SIZE - 1)/BLOCK_SIZE;
	unsigned int index = 0;
	while(index < block_num && index < NDIRECT)
	{
		bm -> free_block(inode -> blocks[index]);
		index ++;
	}
	if(index >= NDIRECT)
	{
		char indirect[BLOCK_SIZE];
		bm -> read_block(inode -> blocks[NDIRECT], indirect);
		bm -> free_block(inode -> blocks[NDIRECT]);
		while(index < block_num)
		{
			blockid_t blockId = *((blockid_t *)indirect + index - NDIRECT);
			bm -> free_block(blockId);
			index ++;
		}
	}
	free(inode);
	free_inode(inum);	  
	return;
}
